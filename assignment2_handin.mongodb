//#region Assignment 2 schema 

// Drop if collection exists
db.customers.drop();

db.createCollection("customers", {
   validator:{
      $jsonSchema: {
         bsonType: "object",
         required: [ "customer_name", "customer_email", "customer_address" ],
         properties: {
            customer_name: {
               bsonType: "string",
               description: "Customer name, required, must be a string, minimum 10 characters, maximum 100 characters",
               minimum: 10,
               maximum: 100
            },
            customer_email: {
               bsonType: "string",
               description: "Customer email, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
            },
            customer_phone: {
               bsonType: "int",
               description: "Customer phone, optional, must be an integer",
            },
            customer_address : {
               bsonType: "string",
               description: "Customer address, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200
            }
         }
      }
   }
})

// Drop if collection exists
db.authors.drop();

db.createCollection("authors", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["author_name"],
         properties: {
            author_name: {
               bsonType: "string",
               description: "Author name, required, must be a string, minimum 10 characters, maximum 100 characters",
               minimum: 10,
               maximum: 100
               },
            }
         }
      }
   }
)

// Drop if collection exists
db.genres.drop();

db.createCollection("genres", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["genre_name"],
         properties: {
            genre_name: {
               bsonType: "string",
               description: "Genre name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            }
         }
      }
   }
)

// Drop if collection exists
db.languages.drop();

db.createCollection("languages", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["language_name"],
         properties: {
            language_name: {
               bsonType: "string",
               description: "Language name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            }
         }
      }
   }
)

// Drop if collection exists
db.characters.drop();

db.createCollection("characters", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["character_name"],
         properties: {
            character_name: {
               bsonType: "string",
               description: "Character name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            }
         }
      }
   }
)

// Drop if collection exists
db.categories.drop();

db.createCollection("categories", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["category_name"],
         properties: {
            category_name: {
               bsonType: "string",
               description: "Language name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
            },
            character_id: {
               bsonType: "objectId",
               description: "Character id, reference, must be an objectId",
            },
            subcategories: {
               bsonType: "array",
               description: "Subcategories, optional, must be an array",
               items: {
                  bsonType: "object",
                  required: ["subcategory_name"],
                  properties: {
                     subcategory_name: {
                        bsonType: "string",
                        description: "Subcategory name, required, must be a string, minimum 10 characters, maximum 200 characters",
                        minimum: 10,
                        maximum: 200,
                        uniqueItems: true
                    },
                  }
                }
              }
            }
         }
      }
   }
)

// Drop if collection exists
db.books.drop();

db.createCollection("books", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["book_name", "book_price", "book_isAvailable", "book_author", "book_category", "book_genre", "book_language", "book_pages"],
         properties: {
            book_name: {
               bsonType: "string",
               description: "Book name, required, must be a string, maximum 200 characters",
               maximum: 200
               },
            book_edition: {
               bsonType: "string",
               description: "Book edition, optional, must be a string",
            }, 
            book_price: {
               bsonType: "double",
               description: "Book price, required, must be a double, minimum 1 characters",
               minimum: 1,
               },
            book_isAvailable: {
               bsonType: "bool",
               description: "Book isAvailable, required, must be a bool",
               },
            book_author: {
               bsonType: "objectId",
               description: "Book author, reference, required, must be a objectId",
               },
            book_category: {
               bsonType: "objectId",
               description: "Book category, reference, required, must be a objectId",
               },
            book_genre: {
               bsonType: "objectId",
               description: "Book genre, reference, required, must be a objectId",
               },
            book_language: {
               bsonType: "objectId",
               description: "Book language, reference, required, must be a objectId",
               },
            book_pages: {
               bsonType: "int",
               description: "Book pages, required, must be an integer",
               },
            book_ISBN: {
               bsonType: "string",
               description: "Book ISBN, optional, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },  
            book_copies: {
               bsonType: "int",
               description: "Book copies, optional, must be an integer",
               },
            book_sales_count: {
               bsonType: "int",
               description: "Book sales count, optional, must be an integer",
               },      
            }
         }
      },
      validationAction: "warn"
   }
)

// Drop if collection exists
db.orders.drop();

db.createCollection("orders", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["order_date", "customer_id", "book_id", "book_quantity"],
         properties: {
            order_date: {
               bsonType: "string",
               description: "Order date, required, must be a string, minimum 10 characters, maximum 200 characters, format: yyyy-MM-dd",
            },
            order_price: {
               bsonType: "double",
               description: "Order price, optional, must be a double",
               },
            book_quantity: {
               bsonType: "int",
               description: "Book quantity, optional, must be an integer",
               minimum: 1,
               },
            customer_id: {
               bsonType: "objectId",
               description: "Customer id, required, reference, must be an objectId, partial primary key",
               },
            book_id: {
               bsonType: "objectId",
               description: "Book id, required, reference, must be an objectId, partial primary key",
               },   
            }   
         }
      }
   }
)

//#endregion

//#region Assignment 2 inserting data
let session = db.getMongo().startSession();
session.startTransaction();

let customersIds = db.customers.insertMany([
  {
    customer_name: "Trevor Jeffery",
    customer_email: "trevor.jfr@gmail.com",
    customer_phone: 1234567890,
    customer_address: "Kattesund 12",
  },
  {
    customer_name: "Morten Spiegelhauer",
    customer_email: "morten.spg@gmail.com",
    customer_phone: 1234567890,
    customer_address: "Løvenørnsgade 18",
  },
  {
    customer_name: "Starr Sergeant",
    customer_email: "starr.stg@gmail.com",
    customer_phone: 1234567890,
    customer_address: "Grønnegade 10",
  },
  {
    customer_name: "Hans Jensen",
    customer_email: "hans.jns@gmail.com",
    customer_phone: 1234567890,
    customer_address: "Kongensgade 1",
  },
  {
    customer_name: "John Doe",
    customer_email: "john.doe@gmail.com",
    customer_phone: 1234567890,
    customer_address: "Kongensgade 2",
  }
]);
customersIds = Object.values(customersIds.insertedIds);

let authorsIds = db.authors.insertMany([
  {
    author_name: "J.K. Rowling",
  },
  {
    author_name: "Stephen King",
  },
  {
    author_name: "George R.R. Martin",
  },
  {
    author_name: "Dan Brown",
  },
  {
    author_name: "J.D. Salinger",
  },
  {
    author_name: "Jane Austen",
  },
  {
    author_name: "William Shakespeare",
  },
  {
    author_name: "Mark Twain",
  },
  {
    author_name: "Ernest Hemingway",
  },
  {
    author_name: "Charles Dickens",
  },
  {
    author_name: "Stephenie Meyer",
  },
  {
    author_name: "C.S. Lewis",
  },
  {
    author_name: "Agatha Christie",
  },
  {
    author_name: "John Grisham",
  }
])
authorsIds = Object.values(authorsIds.insertedIds);

let genresIds = db.genres.insertMany([
  {
    genre_name: "Fantasy",
  },
  {
    genre_name: "Sci-Fi",
  },
  {
    genre_name: "Horror",
  },
  {
    genre_name: "Romance",
  },
  {
    genre_name: "Thriller",
  },
  {
    genre_name: "Mystery",
  },
  {
    genre_name: "Comedy",
  },
  {
    genre_name: "Drama",
  },
  {
    genre_name: "Action",
  },
  {
    genre_name: "Adventure",
  },
  {
    genre_name: "Crime",
  },
  {
    genre_name: "Historical",
  },
  {
    genre_name: "Historical Fiction",
  },
  {
    genre_name: "Graphic Novel",
  },
  {
    genre_name: "Short Story",
  },
  {
    genre_name: "Personal",
  },
  {
    genre_name: "Encyclopedic",
  },
  {
    genre_name: "Guide",
  },
  {
    genre_name: "Travel",
  },
  {
    genre_name: "Children's",
  },
  {
    genre_name: "Religious",
  },
  {
    genre_name: "Spiritual",
  },
  {
    genre_name: "Health",
  },
  {
    genre_name: "Math",
  },
  {
    genre_name: "Anthology",
  },
  {
    genre_name: "Poetry",
  },
  {
    genre_name: "Encyclopedia",
  },
  {
    genre_name: "Dictionary",
  },
  {
    genre_name: "Comics",
  },
  {
    genre_name: "Art",
  },
  {
    genre_name: "Cookbooks",
  },
  {
    genre_name: "Diaries",
  },
  {
    genre_name: "Journals",
  },
  {
    genre_name: "Prayer books",
  },
  {
    genre_name: "Series",
  },
  {
    genre_name: "Trilogy",
  },
  {
    genre_name: "Biography",
  },
  {
    genre_name: "Autobiography",
  },
  {
    genre_name: "Fantasy",
  },
  {
    genre_name: "Fairy Tale",
  },
  {
    genre_name: "Mythology",
  },
  {
    genre_name: "Legend",
  },
  {
    genre_name: "Saga",
  },
  {
    genre_name: "Folklore",
  },
  {
    genre_name: "Horror",
  },
  {
    genre_name: "Gothic",
  },
  {
    genre_name: "Mystery",
  }
])
genresIds = Object.values(genresIds.insertedIds);

let languagesIds = db.languages.insertMany([
  {
    language_name: "English",
  },
  {
    language_name: "Danish",
  },
  {
    language_name: "German",
  },
  {
    language_name: "French",
  },
  {
    language_name: "Spanish",
  },
  {
    language_name: "Italian",
  },
  {
    language_name: "Dutch",
  },
  {
    language_name: "Norwegian",
  },
  {
    language_name: "Swedish",
  },
  {
    language_name: "Finnish",
  },
  {
    language_name: "Japanese",
  },
  {
    language_name: "Chinese",
  },
  {
    language_name: "Russian",
  },
  {
    language_name: "Arabic",
  },
  {
    language_name: "Hebrew",
  },
  {
    language_name: "Latin",
  },
])
languagesIds = Object.values(languagesIds.insertedIds);

let characterIds = db.characters.insertMany([
  {
    character_name: "Aliens",
  },
  {
    character_name: "Vampires",
  },
  {
    character_name: "Werewolves",
  },
  {
    character_name: "Zombies",
  },
  {
    character_name: "Demons",
  },
  {
    character_name: "Angels",
  },
  {
    character_name: "Dragons",
  },
  {
    character_name: "Witches",
  },
  {
    character_name: "Wizards",
  },
  {
    character_name: "Mages",
  },
  {
    character_name: "Necromancers",
  },
  {
    character_name: "Warlocks",
  },
  {
    character_name: "Sorcerers",
  },
  {
    character_name: "Pirates",
  },
]);
characterIds = Object.values(characterIds.insertedIds);

let categoriesIds = db.categories.insertMany([
  {
    category_name: "Fiction",
    character_id: ObjectId(characterIds[0]),
    subcategories: [{subcategory_name:"Fantasy"}, {subcategory_name:"Sci-Fi"}, {subcategory_name:"Fairy Tale"}]
  },
  {
    category_name: "Non-Fiction",
    character_id: ObjectId(characterIds[1]),
    subcategories: [{subcategory_name:"Biography"}, {subcategory_name:"Autobiography"}, {subcategory_name:"History"}]
  },
  {
    category_name: "Poetry",
    character_id: ObjectId(characterIds[2]),
    subcategories: [{subcategory_name:"Poetry"}, {subcategory_name:"Lyrics"}, {subcategory_name:"Limericks"}]
  },
  {
    category_name: "Reference",
    character_id: ObjectId(characterIds[3]),
    subcategories: [{subcategory_name:"Dictionaries"}, {subcategory_name:"Encyclopedias"}, {subcategory_name:"Almanacs"}]
  },
  {
    category_name: "Textbooks",
    character_id: ObjectId(characterIds[4]),
    subcategories: [{subcategory_name:"Science"}, {subcategory_name:"Math"}, {subcategory_name:"Geography"}]
  },
  {
    category_name: "Childrens",
    character_id: ObjectId(characterIds[5]),
    subcategories: [{subcategory_name:"Picture Books"}, {subcategory_name:"Middle Grade"}, {subcategory_name:"Young Adult"}]
  },
  {
    category_name: "Religious",
    character_id: ObjectId(characterIds[6]),
    subcategories: [{subcategory_name:"Bibles"}, {subcategory_name:"Religious Texts"}, {subcategory_name:"Religious Studies"}]
  },
  {
    category_name: "Cookbooks",
    character_id: ObjectId(characterIds[7]),
    subcategories: [{subcategory_name:"Baking"}, {subcategory_name:"Canning"}, {subcategory_name:"Casserole"}]
  },
  {
    category_name: "Dictionaries",
    character_id: ObjectId(characterIds[8]),
    subcategories: [{subcategory_name:"English"}, {subcategory_name:"Spanish"}, {subcategory_name:"French"}]
  },
  {
    category_name: "Comics",
    character_id: ObjectId(characterIds[9]),
    subcategories: [{subcategory_name:"Graphic Novels"}, {subcategory_name:"Manga"}, {subcategory_name:"Anime"}]
  },
  {
    category_name: "Art",
    character_id: ObjectId(characterIds[10]),
    subcategories: [{subcategory_name:"Painting"}, {subcategory_name:"Sculpting"}, {subcategory_name:"Drawing"}]
  }
]);
categoriesIds = Object.values(categoriesIds.insertedIds);

let booksIds = db.books.insertMany([
  {
    book_name: "The Hobbit",
    book_edition: "1st",
    book_price: 10.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[0]),
    book_category: ObjectId(categoriesIds[0]),
    book_genre: ObjectId(genresIds[0]),
    book_language: ObjectId(languagesIds[0]),
    book_pages: 300,
    book_ISBN: "978-3-16-148410-0",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "The Lord of the Rings",
    book_edition: "1st",
    book_price: 19.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[1]),
    book_category: ObjectId(categoriesIds[1]),
    book_genre: ObjectId(genresIds[1]),
    book_language: ObjectId(languagesIds[1]),
    book_pages: 1332,
    book_ISBN: "978-3-16-148410-1",
    book_copies: 199,
    book_sales_count: 0,
  },
  {
    book_name: "Harry Potter and the Philosopher's Stone",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[2]),
    book_genre: ObjectId(genresIds[2]),
    book_language: ObjectId(languagesIds[2]),
    book_pages: 223,
    book_ISBN: "978-3-16-148410-2",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "Harry Potter and the Chamber of Secrets",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[3]),
    book_genre: ObjectId(genresIds[3]),
    book_language: ObjectId(languagesIds[3]),
    book_pages: 251,
    book_ISBN: "978-3-16-148410-3",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "Harry Potter and the Prisoner of Azkaban",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[4]),
    book_genre: ObjectId(genresIds[4]),
    book_language: ObjectId(languagesIds[4]),
    book_pages: 317,
    book_ISBN: "978-3-16-148410-4",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "Harry Potter and the Goblet of Fire",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[5]),
    book_genre: ObjectId(genresIds[5]),
    book_language: ObjectId(languagesIds[5]),
    book_pages: 636,
    book_ISBN: "978-3-16-148410-5",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "Harry Potter and the Order of the Phoenix",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[6]),
    book_genre: ObjectId(genresIds[6]),
    book_language: ObjectId(languagesIds[6]),
    book_pages: 766,
    book_ISBN: "978-3-16-148410-6",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "Harry Potter and the Half-Blood Prince",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[7]),
    book_genre: ObjectId(genresIds[7]),
    book_language: ObjectId(languagesIds[7]),
    book_pages: 607,
    book_ISBN: "978-3-16-148410-7",
    book_copies: 222,
  },
  {
    book_name: "Harry Potter and the Deathly Hallows",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[2]),
    book_category: ObjectId(categoriesIds[8]),
    book_genre: ObjectId(genresIds[8]),
    book_language: ObjectId(languagesIds[8]),
    book_pages: 607,
    book_ISBN: "978-3-16-148410-8",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "The Little Prince",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[3]),
    book_category: ObjectId(categoriesIds[9]),
    book_genre: ObjectId(genresIds[9]),
    book_language: ObjectId(languagesIds[9]),
    book_pages: 96,
    book_ISBN: "978-3-16-148410-9",
    book_copies: 222,
    book_sales_count: 0,
  },
  {
    book_name: "The Alchemist",
    book_edition: "1st",
    book_price: 9.99,
    book_isAvailable: true,
    book_author: ObjectId(authorsIds[6]),
    book_category: ObjectId(categoriesIds[10]),
    book_genre: ObjectId(genresIds[12]),
    book_language: ObjectId(languagesIds[12]),
    book_pages: 197,
    book_ISBN: "978-3-16-148411-2",
    book_copies: 222,
    book_sales_count: 0,
  }
]);
booksIds = Object.values(booksIds.insertedIds);

db.orders.insertMany([
  {
    order_date: "2020-01-01",
    order_price: 10.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[0]),
    book_id: ObjectId(booksIds[0]),
  },
  {
    order_date: "2020-02-03",
    order_price: 32.97,
    book_quantity: 3,
    customer_id: ObjectId(customersIds[1]),
    book_id: ObjectId(booksIds[0],) 
  },
  {
    order_date: "2020-03-05",
    order_price: 19.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[2]),
    book_id: ObjectId(booksIds[1]),
  },
  {
    order_date: "2020-04-07",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[3]),
    book_id: ObjectId(booksIds[2]),
  },
  {
    order_date: "2020-05-09",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[4]),
    book_id: ObjectId(booksIds[3]),
  },
  {
    order_date: "2020-06-11",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[4]),
    book_id: ObjectId(booksIds[4]),
  },
  {
    order_date: "2020-07-13",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[4]),
    book_id: ObjectId(booksIds[5]),
  },
  {
    order_date: "2020-08-15",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[4]),
    book_id: ObjectId(booksIds[6]),
  },
  {
    order_date: "2020-09-17",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[4]),
    book_id: ObjectId(booksIds[7]),
  },
  {
    order_date: "2020-10-19",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[4]),
    book_id: ObjectId(booksIds[8]),
  },
  {
    order_date: "2020-11-21",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[3]),
    book_id: ObjectId(booksIds[9]),
  },
  {
    order_date: "2020-12-23",
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(customersIds[2]),
    book_id: ObjectId(booksIds[10]),
  },
])

db.adminCommand(
   { getLog:'global'} ).log.forEach(x => { print(x) }
)

session.commitTransaction();
//#endregion

//#region Assignment 2 working with data
//#region Modifying data  
// 1.	Sell a book to a customer.
db.orders.insertOne({
    order_date: Date(),
    order_price: 9.99,
    book_quantity: 1,
    customer_id: ObjectId(db.customers.findOne({})._id),
    book_id: ObjectId(db.authors.findOne({})._id),
})

// 2.	Change the address of a customer.
db.customers.updateOne(
    { _id: ObjectId(db.customers.findOne({})._id) },
    { $set: { customer_address: "123 Fake Street" } }
)

// 3.	Add an existing author to a book.
db.books.updateOne(
    { _id: ObjectId(db.books.findOne({})._id) },
    { $set: { book_author: ObjectId(db.authors.findOne({})._id) } }
)

// 4.	Remove the "Space Opera" category and assign all books from that category to the parent category. Don't assume you know the id of the parent category.

// Make sure we have the Space Opera subcategory somewhere in the data
db.categories.updateOne(
    { _id: ObjectId(db.categories.findOne({})._id) },
    { $push: { subcategories: { subcategory_name:"Space Opera" } } }
)

// Find all categories that have Space Opera in the subcategory array, remove it, create a parent category to assign to, then find all books that have a category that matches the category we just removed the subcategory from and assign parent category to them

db.categories.find({ subcategories: { $elemMatch: { subcategory_name: "Space Opera" } } }).forEach(category => {
    db.categories.updateOne(
        { _id: ObjectId(category._id) },
        { $pull: { subcategories: { subcategory_name: "Space Opera" } } },
    )

    let parentCategoryId = db.categories.insertOne({
        category_name: "Insert parent category here",
        character_id: ObjectId(category.character_id),
        subcategories: category.subcategories.filter(subcategory => subcategory.subcategory_name !== "Space Opera")
    }).insertedId

    db.books.updateMany(
        { book_category: ObjectId(category._id) },
        { $set: { book_category: ObjectId(parentCategoryId) } }
    )
})


// 5.	Sell 3 copies of one book and 2 of another in a single order
db.orders.insertOne({
    order_date: Date(),
    order_price: 9.99,
    book_quantity: 3,
    customer_id: ObjectId(db.customers.findOne({})._id),
    book_id: ObjectId(db.authors.findOne({})._id),
})

db.orders.insertOne({
    order_date: Date(),
    order_price: 9.99,
    book_quantity: 2,
    customer_id: ObjectId(db.customers.findOne({})._id),
    book_id: ObjectId(db.authors.findOne({})._id),
})

// 6.	Change the name of a category.
db.categories.updateOne(
    { _id: ObjectId(db.categories.findOne({})._id) },
    { $set: { category_name: "New Category Name" } }
)

// 7.	Change the name of a book.
db.books.updateOne(
    { _id: ObjectId(db.books.findOne({})._id) },
    { $set: { book_name: "New Book Name" } }
)

// 8.	Change the name of an author.
db.authors.updateOne(
    { _id: ObjectId(db.authors.findOne({})._id) },
    { $set: { author_name: "New Author Name" } }
)

// 9.	Change the name of a customer.
db.customers.updateOne(
    { _id: ObjectId(db.customers.findOne({})._id) },
    { $set: { customer_name: "New Customer Name" } }
)

// 10.	Change the name of a the "Space Opera" subcategory to "New Subcategory Name".
db.categories.updateOne(
    { _id: ObjectId(db.categories.findOne({})._id) },
    { $push: { subcategories: { subcategory_name:"Space Opera" } } }
)

db.categories.updateOne(
    { _id: ObjectId(db.categories.findOne({})._id), subcategories: { $elemMatch: { subcategory_name: "Space Opera" } } },
    { $set: { "subcategories.$.subcategory_name": "New Subcategory Name" } }
)

// 11.	Remove an author from a book.
db.books.updateOne(
    { _id: ObjectId(db.books.findOne({})._id) },
    { $unset: { book_author: 1 } }
)

// 12.	Remove a subcategory from a category.
db.categories.updateOne(
    { _id: ObjectId(db.categories.findOne({})._id) },
    { $unset: { subcategories: 1 } }
)

//#endregion

//#region Querying data
// Write find() or aggregate() statements to return the following data
// 1.	All books by an author (Stephen King)
db.books.find({ book_author: ObjectId(db.authors.findOne({author_name: "Stephen King"})._id) })

// 2.	Total price of an order
db.orders.aggregate([
        {
                $match: {
                        _id: ObjectId(db.orders.findOne({})._id)
                }
        },
        {
                $project: {
                        order_price: 1,
                        book_quantity: 1,
                        total_price: {
                                $multiply: ["$order_price", "$book_quantity"]
                        }
                }
        }
])

// 3.	Total sales (in £) to a customer
const randomCustomer = db.customers.findOne({})
db.orders.aggregate([
        {
                $match: {
                        customer_id: ObjectId(randomCustomer._id)
                }
        },
        {
                $project: {
                        customer_id: 1,
                        order_price: 1,
                        book_quantity: 1,
                        total_price: {
                                $multiply: ["$order_price", "$book_quantity", 1.2]
                        }
                }
        },
        {
                $group: {
                        _id: {customer_id: "$customer_id"},
                        total_sales: {
                                $sum: "$total_price"
                        }
                }
        }
])

// 4.	Books that are categorized as neither fiction nor non-fiction
db.books.find({
        book_category: {
                $nin: [
                        ObjectId(db.categories.findOne({ category_name: "Fiction" })._id),
                        ObjectId(db.categories.findOne({ category_name: "Non-Fiction" })._id)
                ]
        }
})

// 5.	Average page count by all genres
db.books.aggregate([
        {
                $group: {
                        _id: "$book_genre",
                        average_page_count: {
                                $avg: "$book_pages"
                        }
                }
        }
])

// 6.	Categories that have no sub-categories
db.categories.find({
        subcategories: {
                $size: 0
        }
})

// 7.	ISBN numbers of books with more than one author
db.books.find({
        'book_author.1': {
                $exists: true
        }
}, {
        book_ISBN: 1
})

// 8.	ISBN numbers of books that sold at least X copies (you decide the value for X)
db.books.find({
        book_sales_count: {
                $gte: 10
        }
}, {
        book_ISBN: 1
})

// 9.	Number of copies of each book sold – unsold books should show as 0 sold copies.
db.books.aggregate([
        {
                $lookup: {
                        from: "orders",
                        localField: "_id",
                        foreignField: "book_id",
                        as: "book_orders"
                }
        },
        {
                $project: {
                        book_name: 1,
                        book_sales_count: {
                                $size: "$book_orders"
                        }
                }
        }
])

// 10.	Best-selling books: The top 10 selling books ordered in descending order by number of sales.
db.books.aggregate([
        {
                $lookup: {
                        from: "orders",
                        localField: "_id",
                        foreignField: "book_id",
                        as: "book_orders"
                }
        },
        {
                $project: {
                        book_name: 1,
                        book_sales_count: {
                                $size: "$book_orders"
                        }
                }
        },
        {
                $sort: {
                        book_sales_count: -1
                }
        },
        {
                $limit: 10
        }
])

// 11.	Best-selling genres: The top 3 selling genres ordered in descending order by number of sales.
db.books.aggregate([
        {
                $lookup: {
                        from: "orders",
                        localField: "_id",
                        foreignField: "book_id",
                        as: "book_orders"
                }
        },
        {
                $project: {
                        book_genre: 1,
                        book_category: 1,
                        book_sales_count: {
                                $size: "$book_orders"
                        }
                }
        },
        {
                $group: {
                        _id: "$book_genre",
                        total_sales: {
                                $sum: "$book_sales_count"
                        }
                }
        },
        {
                $sort: {
                        total_sales: -1
                }
        },
        {
                $limit: 3
        }
])

// 12.	All science fiction books. Note: Books in science fiction subcategories like cyberpunk also count as science fiction. Don’t use your knowledge of the concrete category structure. (Hint: $graphLookup)
// Add a science fiction book
db.books.insertOne({
        book_name: "The Martian",
        book_author: [ObjectId(db.authors.findOne({})._id)],
        book_ISBN: "978-0-316-23942-9",
        book_genre: ObjectId(db.genres.findOne({})._id),
        book_category: ObjectId(db.categories.findOne({category_name: "Science Fiction"})._id),
        book_pages: 384,
        book_sales_count: 0
})

//Add a history book
db.books.insertOne({
        book_name: "The History of the World",
        book_author: [ObjectId(db.authors.findOne({})._id)],
        book_ISBN: "978-0-316-23942-9",
        book_genre: ObjectId(db.genres.findOne({})._id),
        book_category: ObjectId(db.categories.findOne({category_name: "History"})._id),
        book_pages: 384,
        book_sales_count: 0
})

db.books.aggregate([
        {
                $graphLookup: {
                        from: "categories",
                        startWith: "$book_category",
                        connectFromField: "subcategories",
                        connectToField: "_id",
                        as: "book_categories"
                }
        },
        {
                $match: {
                        $or: [
                                { "book_categories.category_name": "Science Fiction" },
                                { "book_categories.subcategories.subcategory_name": "Science Fiction"}
                        ]
                }
        }
])

// 13.	Characters used in science fiction books. Note from (12) applies here as well.
db.books.aggregate([
        {
                $graphLookup: {
                        from: "categories",
                        startWith: "$book_category",
                        connectFromField: "character_id",
                        connectToField: "_id",
                        as: "book_categories"
                }
        },
        {
                $match: {
                        $or: [
                                { "book_categories.category_name": "Science Fiction" },
                                { "book_categories.subcategories.subcategory_name": "Science Fiction"}
                        ]
                }
        },
        {
                $project: {
                        book_characters: 1
                }
        }
])

// 14.	For each category: Number of books in the category.
db.books.aggregate([
        {
                $graphLookup: {
                        from: "categories",
                        startWith: "$book_category",
                        connectFromField: "subcategories",
                        connectToField: "_id",
                        as: "book_categories"
                }
        },
        {
                $group: {
                        _id: {
                                category_name: "$book_categories.category_name",
                                subcategory_name: "$book_categories.subcategories.subcategory_name"},
                        book_count: {
                                $sum: 1
                        }
                }
        }
])

//#endregion

//#endregion