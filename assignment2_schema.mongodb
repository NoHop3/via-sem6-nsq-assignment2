const db = 'assignment_2';
use(db);

//#region Assignment 2 schema 

db.createCollection("customers", {
   validator:{
      $jsonSchema: {
         bsonType: "object",
         required: [ "customer_name", "customer_email", "customer_address" ],
         properties: {
            customer_name: {
               bsonType: "string",
               description: "Customer name, required, must be a string, minimum 10 characters, maximum 100 characters",
               minimum: 10,
               maximum: 100
            },
            customer_email: {
               bsonType: "string",
               description: "Customer email, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
            },
            customer_phone: {
               bsonType: "int",
               description: "Customer phone, optional, must be an integer",
            },
            customer_address : {
               bsonType: "string",
               description: "Customer address, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200
            }
         }
      }
   }
})

db.createCollection("authors", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["author_name"],
         properties: {
            author_name: {
               bsonType: "string",
               description: "Author name, required, must be a string, minimum 10 characters, maximum 100 characters",
               minimum: 10,
               maximum: 100
               },
            }
         }
      }
   }
)

db.createCollection("genres", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["genre_name"],
         properties: {
            genre_name: {
               bsonType: "string",
               description: "Genre name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            }
         }
      }
   }
)

db.createCollection("languages", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["language_name"],
         properties: {
            language_name: {
               bsonType: "string",
               description: "Language name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            }
         }
      }
   }
)

db.createCollection("characters", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["character_name"],
         properties: {
            character_name: {
               bsonType: "string",
               description: "Character name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            }
         }
      }
   }
)

db.createCollection("categories", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["category_name"],
         properties: {
            category_name: {
               bsonType: "string",
               description: "Language name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },
            },
            character_id: {
               bsonType: "int",
               description: "Character id, must be an integer",
            },
            subcategories: {
               bsonType: "array",
               description: "Subcategories, optional, must be an array",
               items: {
                  bsonType: "object",
                  required: ["subcategory_name"],
                  properties: {
                     subcategory_name: {
                        bsonType: "string",
                        description: "Subcategory name, required, must be a string, minimum 10 characters, maximum 200 characters",
                        minimum: 10,
                        maximum: 200
                        uniqueItems: true
                     },
                  }
               }
            }
         }
      }
   }
)

db.createCollection("books", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["book_name", "book_price", "book_isAvailable", "book_author", "book_category", "book_genre", "book_language", "book_pages"],
         properties: {
            book_name: {
               bsonType: "string",
               description: "Book name, required, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200
               },
            book_edition: {
               bsonType: "int",
               description: "Book edition, optional, must be an integer",
            }, 
            book_price: {
               bsonType: "decimal",
               description: "Book price, required, must be a decimal, minimum 1 characters, maximum 10 characters",
               minimum: 1,
               maximum: 10
               },
            book_isAvailable: {
               bsonType: "bool",
               description: "Book isAvailable, required, must be a bool",
               },
            book_author: {
               bsonType: "int",
               description: "Book author, required, must be an integer",
               },
            book_category: {
               bsonType: "int",
               description: "Book category, required, must be an integer",
               },
            book_genre: {
               bsonType: "int",
               description: "Book genre, required, must be an integer",
               },
            book_language: {
               bsonType: "int",
               description: "Book language, required, must be an integer",
               },
            book_pages: {
               bsonType: "int",
               description: "Book pages, required, must be an integer",
               },
            book_ISBN: {
               bsonType: "string",
               description: "Book ISBN, optional, must be a string, minimum 10 characters, maximum 200 characters",
               minimum: 10,
               maximum: 200,
               uniqueItems: true
               },  
            book_copies: {
               bsonType: "int",
               description: "Book copies, optional, must be an integer",
               },
            book_sales_count: {
               bsonType: "int",
               description: "Book sales count, optional, must be an integer",
               },      
            }
         }
      }
   }
)

db.createCollection("orders", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["order_date", "customer_id", "book_id", "book_quantity"],
         properties: {
            order_date: {
               bsonType: "string",
               description: "Order date, required, must be a string, minimum 10 characters, maximum 200 characters, format: yyyy-MM-dd",
            },
            order_price: {
               bsonType: "decimal",
               description: "Order price, optional, must be a decimal, minimum 1 characters, maximum 10 characters",
               },
            book_quantity: {
               bsonType: "int",
               description: "Book quantity, optional, must be an integer",
               minimum: 1,
               },
            customer_id: {
               bsonType: "int",
               description: "Customer id, required, must be an integer, partial primary key",
               },
            book_id: {
               bsonType: "int",
               description: "Book id, required, must be an integer, partial primary key",
               },   
            }   
         }
      }
   }
)

//#endregion

//#region Assignment 2 inserting data
db.customers.insertMany([
  {
    date: "2020-03-03",
    time: "19:30",
    type: "Concert",
    musicalGenre: "Classical",
    performer: ["Anne Sofie Sloth Nilausen"],
    seat: {room: "Lille sal"},
    price: NumberDecimal("55"),
    ticketHolder: {
      name: "Kaylee Roderick",
      address: {
        street: "Frederiksgade 44",
        zip: NumberInt(8000),
        town: "Aarhus C"
      }
    }
  },
  {
    date: "2020-03-03",
    time: "19:30",
    type: "Concert",
    musicalGenre: "Classical",
    performer: ["Anne Sofie Sloth Nilausen"],
    seat: {room: "Lille sal"},
    price: NumberDecimal("55"),
    ticketHolder: {
      name: "Trevor Jeffery",
      address: {
        street: "Kattesund 12",
        zip: NumberInt(8700),
        town: "Horsens"
      }
    }
  },
  {
    date: "2020-03-04",
    time: "19:00",
    type: "Lecture",
    title: "Skattesagen",
    performer: ["Morten Spiegelhauer"],
    seat: {room: "Lille sal", row: NumberInt(11), number: NumberInt(18)},
    price: NumberDecimal("150"),
    ticketHolder: {
      name: "Edna Durant",
      address: {
        street: "Løvenørnsgade 18",
        zip: NumberInt(8700),
        town: "Horsens"
      }
    }
  },
  {
    date: "2020-03-04",
    time: "19:00",
    type: "Lecture",
    title: "Skattesagen",
    performer: ["Morten Spiegelhauer"],
    seat: {room: "Lille sal", row: NumberInt(3), number: NumberInt(8)},
    price: NumberDecimal("230"),
    ticketHolder: {
      name: "Damian Beringer",
      address: {
        street: "Løvenørnsgade 18",
        zip: NumberInt(8700),
        town: "Horsens"
      }
    }
  },
  {
    date: "2020-03-04",
    time: "19:00",
    type: "Lecture",
    title: "Skattesagen",
    performer: ["Morten Spiegelhauer"],
    seat: {room: "Lille sal", row: NumberInt(6), number: NumberInt(18)},
    price: NumberDecimal("190"),
    ticketHolder: {
      name: "Starr Sergeant",
      address: {
        street: "Grønnegade 10",
        zip: NumberInt(8000),
        town: "Aarhus C"
      }
    }
  },
])
console.log("🚀 ~ file: assignment2_schema.mongodb:343 ~ tickets:", tickets)


//#endregion